/*******************************************************************
Algorithm Study
Baekjoon OJ DP
1309 동물원
2022/01/24 이호준
# 아이디어
1. 가능한 경우는 해당 행에서 1째열에 넣느냐, 2째열에 넣느냐 넣지않느냐의 경우의 수가 존재한다.
배치하는 경우의 수를 알아야하는데
모두 구해서 할 경우 시간초과가 날경우가 분명했다.
중복되는 연산을 줄이는 dp알고리즘을 통해 연산을 풀었다.
첫번째 열에 넣을 수 있는 경우는 사자를 그 전 행의 2번째 열에 넣었거나 사자가 없는경우이다.
두번째 열에 넣을 수 있는 경우는 같은 논리로 사자를 그 전 행의 1번째 열에 넣었거나 사자가 없는 경우이다.
행에 넣지 않는 경우는 1번째 열, 2번째열, 넣지 않은 경우 를 모두 더해서 구하면 된다.
*******************************************************************/
#include <iostream>

using namespace std;

unsigned long long dp[100001][3];

int main(void)
{

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n;

    cin >> n;

    dp[0][0] = 1;
    dp[0][1] = 1;
    dp[0][2] = 1;

    for (int i = 1; i < n; i++)
    {
        dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % 9901;
        dp[i][2] = (dp[i - 1][0] + dp[i - 1][1]) % 9901;
        dp[i][0] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][0]) % 9901;
    }

    cout << (dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2]) % 9901;

    return 0;
}